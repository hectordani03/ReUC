// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  // ==== DEPLOY LOCALLY
  // provider = "postgresql"
  // url      = env("DATABASE_URL")

  // ==== TEST
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  uuid_user   String       @id @default(uuid())
  email       String       @unique
  password    String
  firstName   String?      @map("first_name")
  middleName  String?      @map("middle_name")
  lastName    String?      @map("last_name")
  status      Int?         @map("user_status_id")
  userStatus  User_Status? @relation(fields: [status], references: [user_status_id])
  lastLoginAt DateTime?    @map("last_login_at")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  admins     Admin[]
  students   Student[]
  professors Professor[]
  outsiders  Outsider[]

  @@index([email])
  @@map("Users")
}

model User_Status {
  user_status_id Int      @id @default(autoincrement())
  name           String
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  users User[]

  @@map("User_Statuses")
}

model Admin {
  uuid_admin String   @id @default(uuid())
  uuidUser   String   @map("uuid_user")
  user       User     @relation(fields: [uuidUser], references: [uuid_user])
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("Admins")
}

model Student {
  uuid_student   String          @id @default(uuid())
  uuidUser       String          @map("uuid_user")
  user           User            @relation(fields: [uuidUser], references: [uuid_user])
  universityId   BigInt          @unique @map("university_id")
  averageGrade   Float?          @map("average_grade")
  enrollmentYear DateTime?       @map("enrollment_year")
  status         Int?            @map("student_status_id")
  studentStatus  Student_Status? @relation(fields: [status], references: [student_status_id])
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")

  @@index([uuidUser])
  @@index([universityId])
  @@map("Students")
}

model Student_Status {
  student_status_id Int      @id @default(autoincrement())
  name              String
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  students Student[]

  @@map("Student_Statuses")
}

model Professor {
  uuid_professor String          @id @default(uuid())
  uuidUser       String          @map("uuid_user")
  user           User            @relation(fields: [uuidUser], references: [uuid_user])
  universityId   BigInt          @unique @map("university_id")
  role           Int?            @map("professor_role_id")
  professorRole  Professor_Role? @relation(fields: [role], references: [professor_role_id])
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")

  @@index([uuidUser])
  @@index([universityId])
  @@map("Professors")
}

model Professor_Role {
  professor_role_id Int      @id @default(autoincrement())
  name              String
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  professors Professor[]

  @@map("Professor_Roles")
}

model Outsider {
  uuid_outsider    String   @id @default(uuid())
  uuidUser         String   @map("uuid_user")
  user             User     @relation(fields: [uuidUser], references: [uuid_user])
  organizationName String?  @map("organization_name")
  phoneNumber      String?  @map("phone_number")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  @@index([uuidUser])
  @@map("Outsiders")
}
